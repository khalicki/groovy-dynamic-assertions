/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package com.github.khalicki.dynamicassertions

import com.github.khalicki.dynamicassertions.data.EmptyObject
import spock.lang.FailsWith
import spock.lang.Specification

class DynamicAssertionsAssertThatSpec extends Specification {

    def "should succeed when null is asserted"() {
        expect:
            DynamicAssertions.assertThat(null)
    }

    def "should succeed when object is not null"() {
        expect:
            DynamicAssertions.assertThat(new EmptyObject())
    }

    def "should succeed when argument is primitive"() {
        expect:
            DynamicAssertions.assertThat(42)
    }

    def "should fail when isNotNull() is called on null value"() {
        when:
            DynamicAssertions.assertThat(null).isNotNull()

        then:
            def exception = thrown(AssertionError)
            exception.message.contains('objectUnderTest != null')
    }

    def "should succeed when isNotNull() is called on not null object"() {
        expect:
            DynamicAssertions.assertThat(new EmptyObject()).isNotNull()
    }

    def "should succeed when isNotNull() is called on not null primitive"() {
        expect:
            DynamicAssertions.assertThat(5).isNotNull()
    }

    def "should succeed when isNull() is called on null value"() {
        expect:
            DynamicAssertions.assertThat(null).isNull()
    }

    def "should fail when isNull() is called on not null object"() {
        when:
            DynamicAssertions.assertThat(new EmptyObject()).isNull()

        then:
            def exception = thrown(AssertionError)
            exception.message.contains('objectUnderTest == null')
    }

    def "should fail when isNull() is called on not null primitive"() {
        when:
            DynamicAssertions.assertThat(5).isNull()

        then:
            def exception = thrown(AssertionError)
            exception.message.contains('objectUnderTest == null')
    }
}
